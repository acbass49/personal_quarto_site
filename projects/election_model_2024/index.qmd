---
title: 2024 US Presidential Election Model
date: "2023-12-31"
categories: [Python, Stats, Dataviz]
image: ./nail.png
title-block-banner: false
date-modified: today
freeze: false
execute: 
    echo: false
    warning: false
    output: true
---

There are a lot of election models out there - [fivethirtyeight](https://projects.fivethirtyeight.com/polls/president-general/), [The Cook Political Report](https://www.cookpolitical.com/ratings), and [Decision Desk](https://elections2024.thehill.com/national/biden_trump_general) to name a few. So what am I doing here?

![](https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse3.mm.bing.net%2Fth%3Fid%3DOIP.Sg4vA_XJdXeFFWVlG-RwQQHaEK%26pid%3DApi&f=1&ipt=0df12f5ec930c9f3754f2fd22f2b3787f72fdd6e8c850c3a5820c09b94b05233&ipo=images){width=100%}

```{python}
# | output: false
import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import datetime

# Load my Data
prob_data = pd.read_csv('https://raw.githubusercontent.com/acbass49/Election2024/main/data/state_probabilities.csv')
tracking_data = pd.read_csv("https://raw.githubusercontent.com/acbass49/Election2024/main/data/tracking_data.csv")
simulation_data = pd.read_csv("https://raw.githubusercontent.com/acbass49/Election2024/main/data/simulation_data.csv")
```

#### The Problem

Well, it may be the start of a tradition at this point since I did one [last presidential election](/./projects/election_model/index.qmd) and I thought it actually performed quite well (election was close; my latest simulations also close). But, in the end, I created this because I felt like I was blindly trusting other's models without understanding them. Many election model builders claim to use demographic patterns, previous election results, economic considerations, polls, etc.. But, beside polling numbers, what data exactly are they using and where does it come from? Also, what do their models actually look like? Ideally, I would want enough information to recreate the model myself to see what they actually did, but that information isn't available.

#### What I did

My goal was to create a model that is based exclusively on **recent quality polling**, and that's it! No mysterious variables thrown into already complex models; no sensitive consumer data that feels like violations of privacy; and, no blindly trusting an invisible methodology where you can't possibly recreate the model. **Since I finished data science school within the last four years, I decided to take a more rigourous approach than last time which I write about [here](./methodology.pdf) and code up [here](https://github.com/acbass49/Election2024)**. Overall, the purpose is to give an educated guess of what would happen if the election were held each day. I also just like this kinda thing ðŸ˜‚.

:::{.callout-note}
The charts below are part of an automated data pipeline that updates each day until the election. So check back soon! You can see when the charts were last updated by looking at the Date Modified information at the top of the webpage.
:::

-----------------------------------

#### Now for the model...

This first figure represents today's simulation data. Everyday, I simulate the election 50,000 times and visualize the distribution of electoral votes below. The percentage in the graph title below is the probability Trump will win the election if the election were held today.

:::{.callout-caution}
These charts are designed to be viewed on Desktop. They may look a bit weird if viewing from a mobile device. For example, the choropleth map will look small, but you still can hover each chart for more info!
:::

```{python}
import plotly.express as px

win_perc = sum(simulation_data['points']>=270)/simulation_data.shape[0]

simulation_data = simulation_data.rename(columns={'winner':'Winner'})

fig = px.histogram(simulation_data, x="points", color="Winner",
color_discrete_map={"Trump":"#ec543c", "Biden":"#636bfa"})
fig.update_layout(
    showlegend=True,
    plot_bgcolor='white',
    title_text = f'Today Trump Won {round(win_perc*100,2)}% of Elections',
    title_x=0.5,
    xaxis_title="EC Votes Trump Wins",
    yaxis_title="Simulation Wins",
    height=350
)

config = {'displayModeBar': False, 'scrollZoom': False}
fig.show(config=config)
```
:::{.callout-note}
See how the histogram is more spikey than smooth? This is because some outcomes with even 1 EC point difference can be more likely given how state groupings naturally divide out.
:::

:::{.callout-tip}
Notice that you still see both candidates win some simulations. Even though one outcome may be more likely, don't count the other out!
:::

In the figure below, you can see the probability Trump will win each state if the election were held today.

```{python}

fig = go.Figure(data=go.Choropleth(
    locations=prob_data['State'], # Spatial coordinates
    z = prob_data['Trump Win Prob.'].astype(float), # Data to be color-coded
    locationmode = 'USA-states', # set of locations match entries in `locations`
    colorscale = 'rdylbu_r',
    marker_line_color='white',
    hovertemplate = "State: %{location}<br>Trump Win Probability: %{z}%<extra></extra>",
    showscale=False
))

fig.update_layout(
    title_text = 'Trump Win Probability By State<br>(hover chart for more info)',
    geo_scope='usa', # limite map scope to USA
    title_x=0.5
)
config = {'displayModeBar': False, 'scrollZoom': False}
fig.show(config=config)

```

:::{.callout-tip}
Watch states like Georgia and Arizona closely which had unexpected results last election. Also, keep an eye on light colored states where the winner is more uncertain!
:::
:::{.callout-note}
Districts from States using the [congressional district method](https://en.wikipedia.org/wiki/United_States_Electoral_College#Congressional_district_method) are not included on the map, but they are included in the model!
:::

This last graph is a daily tracker of the percent of election simulations won over time by candidate. You can view how the win probabilities change as the election cycle churns on.

```{python}
from datetime import timedelta

tracking_data = tracking_data \
    .rename(columns = {'Win Percentage':'Win_Percentage'}) \
    .assign(
        Date = lambda x:pd.to_datetime(x.Date,format='%Y-%m-%d'),
        Win_Percentage = lambda x:round(x.Win_Percentage*100,1),
        LB = lambda x:round(x.LB*100,1),
        UB = lambda x:round(x.UB*100,1),
    )

fig = go.Figure()

fig.add_trace(
    go.Scatter(
        x = tracking_data.query('Candidate == "Biden"')['Date'],
        y = tracking_data.query('Candidate == "Biden"')['Win_Percentage'],
        name = 'Biden',
        line_shape='spline'
    )
)

fig.add_trace(
    go.Scatter(
        x = tracking_data.query('Candidate == "Trump"')['Date'],
        y = tracking_data.query('Candidate == "Trump"')['Win_Percentage'],
        name = 'Trump',
        line_shape='spline'
    )
)

fig.update_layout(
    xaxis=dict(
        showline=True,
        showgrid=True,
        showticklabels=True,
        linecolor='rgb(204, 204, 204)',
        linewidth=2,
        ticks='outside',
        tickcolor='rgb(204, 204, 204)',
        tickformat= '%b %d',
        type='date',
        #dtick= 86400000.0,
    ),
    showlegend=True,
    plot_bgcolor='white',
    title_text = 'Percent of Simulations Won Over Time<br>(hover chart for more info)',
    title_x=0.5,
    xaxis_range=[tracking_data.Date.min()-timedelta(days=1),tracking_data.Date.max()+timedelta(days=1)],
    hovermode='x unified',
    legend_title_text = 'Candidate',
    margin={"l":100,"r":100,"t":130,"b":130},
    yaxis_range=[0,100],
    annotations = [dict(xref='paper',
        yref='paper',
        x=1, y=-0.3,
        showarrow=False,
        text ='*confidence intervals contain 95% of sample means',
        font=dict(
            size=10,
            ),)]
)

fig.update_yaxes(
    title_text = "Simulations Won(%)",
    ticksuffix="%"
)

fig.add_traces([go.Scatter(
        x = tracking_data.query('Candidate == "Trump"')['Date'], 
        y = tracking_data.query('Candidate == "Trump"')['UB'],
        name = "",
        mode = 'lines', line_color = 'rgba(0,0,0,0)',
        hoverinfo = 'skip',
        showlegend = False),
    go.Scatter(
        x = tracking_data.query('Candidate == "Trump"')['Date'], 
        y = tracking_data.query('Candidate == "Trump"')['LB'],
        name = "",
        mode = 'lines', line_color = 'rgba(0,0,0,0)',
        fill='tonexty', fillcolor = 'rgba(255, 0, 0, 0.2)',
        hoverinfo = 'skip',
        showlegend = False)])

fig.add_traces([go.Scatter(
        x = tracking_data.query('Candidate == "Biden"')['Date'], 
        y = tracking_data.query('Candidate == "Biden"')['UB'],
        name = "97.5 Win Perc",
        hovertext = None,
        showlegend = False,
        hoverinfo = 'skip',
        mode = 'lines', line_color = 'rgba(0,0,0,0)'),
    go.Scatter(
        x = tracking_data.query('Candidate == "Biden"')['Date'], 
        y = tracking_data.query('Candidate == "Biden"')['LB'],
        name = "2.5 Win Perc.",
        hovertext = None,
        mode = 'lines', line_color = 'rgba(0,0,0,0)',
        hovertemplate = '',
        showlegend = False,
        hoverinfo = 'skip',
        fill='tonexty', fillcolor = 'rgba(0, 0, 255, 0.2)')])

config = {'displayModeBar': False, 'scrollZoom': False}
fig.show(config=config)

```

:::{.callout-note}
To get a sense of the spread of win percentages each day, I take 1000 samples of the simulations (n=100) and record the 2.5 and 97.5 percentile of the sample means. This is by no means a perfect measure for a confidence interval, but should provide a sense of possible win percentages day by day.
:::

Thanks for viewing this post! Check back soon for more updates. You can see when the data was last modified at the top. Feel free to share thoughts, comments, or your predictions below.

<div id="disqus_thread"></div>
<script>
    /**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */
    var disqus_config = function () {
    this.page.url = 'https://alexbass.me/posts/election_model_2024/';  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = 'election_model_2024'; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://alexbassc.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

<script id="dsq-count-scr" src="//alexbassc.disqus.com/count.js" async></script>
