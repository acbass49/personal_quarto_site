{
  "hash": "066a3eefc9e66d4a293388a43d013fc1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ndate: '2024-08-15'\ntitle: \"Python Package : `survey_tools`\"\nsubtitle: \"Convenient tools for survey reseachers\"\ncategories: [Python, Software]\nimage: ./survey_tools.png\ntitle-block-banner: false\ntoc: true\ntoc-title: Page Contents\n---\n\n\n\n\n![](./survey_tools.png){fig-align=\"center\"}\n\n# Introduction\n\nHaving worked with survey data for over 6 years, I wanted to put a few simple tools into a python package others could use. Some of these tools were inspired by functions in R, some were used in previous places of employment, and some of these tools were to smooth over my personal pain points.\n\nOn 15 August 2024, I published the first official release on [PyPI](https://pypi.org/project/survey-tools/) and [github](https://github.com/acbass49/survey_tools) for `survey_tools`. Stars, feedback, and contributions welcome!\n\n# Quick Vignette\n\n### Installation\n\nFirst, let's install the package! In your terminal, you can easily install `survey_tools` through `pip`.\n\n::: {#b278dfcf .cell execution_count=1}\n``` {.python .cell-code}\npython -m pip install survey_tools\n```\n:::\n\n\n### Import Packages + Load In Data\n\nFor our purposes here, I'll load in a survey data set that I have worked on in the past called the [American Family Survey](https://csed.byu.edu/american-family-survey) which is publically available.\n\n::: {#0e0bc5b5 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport survey_tools as st\n\nlink = 'https://csed.byu.edu/00000183-a4c5-d2da-abe3-feed7be30001/2021data'\ndata = pd.read_stata(link)\nprint(data.shape)\ndata.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(3000, 413)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>caseid</th>\n      <th>weight</th>\n      <th>PAR006_treat</th>\n      <th>FAMTAX007_treat</th>\n      <th>s21_MSC001</th>\n      <th>s21_MSC003</th>\n      <th>s21_MSC003_b_1</th>\n      <th>s21_MSC003_b_2</th>\n      <th>s21_MSC003_b_3</th>\n      <th>s21_MSC003_c</th>\n      <th>...</th>\n      <th>votereg</th>\n      <th>ideo5</th>\n      <th>newsint</th>\n      <th>religpew</th>\n      <th>pew_churatd</th>\n      <th>pew_bornagain</th>\n      <th>pew_religimp</th>\n      <th>pew_prayer</th>\n      <th>starttime</th>\n      <th>endtime</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1492039695</td>\n      <td>0.698217</td>\n      <td>Show rows: The coronavirus pandemic and Racial...</td>\n      <td>Treatment 1 (\"pull parents away\")</td>\n      <td>Not currently in a committed relationship</td>\n      <td>NaN</td>\n      <td>not selected</td>\n      <td>not selected</td>\n      <td>selected</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>Yes</td>\n      <td>Very liberal</td>\n      <td>Most of the time</td>\n      <td>Protestant</td>\n      <td>Once a week</td>\n      <td>No</td>\n      <td>Very important</td>\n      <td>Once a day</td>\n      <td>1.940257e+12</td>\n      <td>1.940258e+12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1492042119</td>\n      <td>1.195809</td>\n      <td>Show rows: The coronavirus pandemic and Racial...</td>\n      <td>Treatment 2 (\"encourage poverty\")</td>\n      <td>Not currently in a committed relationship</td>\n      <td>NaN</td>\n      <td>selected</td>\n      <td>not selected</td>\n      <td>not selected</td>\n      <td>2005</td>\n      <td>...</td>\n      <td>Yes</td>\n      <td>Conservative</td>\n      <td>Most of the time</td>\n      <td>Roman Catholic</td>\n      <td>Never</td>\n      <td>No</td>\n      <td>Somewhat important</td>\n      <td>Seldom</td>\n      <td>1.940257e+12</td>\n      <td>1.940258e+12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1492870805</td>\n      <td>1.155043</td>\n      <td>Show rows: The coronavirus pandemic and Racial...</td>\n      <td>Control</td>\n      <td>Married</td>\n      <td>7 years</td>\n      <td>not selected</td>\n      <td>not selected</td>\n      <td>selected</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>Yes</td>\n      <td>Moderate</td>\n      <td>Don't know</td>\n      <td>Nothing in particular</td>\n      <td>Never</td>\n      <td>No</td>\n      <td>Not at all important</td>\n      <td>Never</td>\n      <td>1.940258e+12</td>\n      <td>1.940258e+12</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1492850287</td>\n      <td>0.771161</td>\n      <td>No extra rows on PAR006</td>\n      <td>Treatment 2 (\"encourage poverty\")</td>\n      <td>Not currently in a committed relationship</td>\n      <td>NaN</td>\n      <td>not selected</td>\n      <td>selected</td>\n      <td>not selected</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>Yes</td>\n      <td>Moderate</td>\n      <td>Most of the time</td>\n      <td>Roman Catholic</td>\n      <td>Seldom</td>\n      <td>No</td>\n      <td>Somewhat important</td>\n      <td>A few times a week</td>\n      <td>1.940257e+12</td>\n      <td>1.940258e+12</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1492863669</td>\n      <td>0.810394</td>\n      <td>No extra rows on PAR006</td>\n      <td>Treatment 1 (\"pull parents away\")</td>\n      <td>Currently in a committed relationship, but not...</td>\n      <td>NaN</td>\n      <td>selected</td>\n      <td>not selected</td>\n      <td>not selected</td>\n      <td>2005</td>\n      <td>...</td>\n      <td>Don't know</td>\n      <td>Conservative</td>\n      <td>Some of the time</td>\n      <td>Nothing in particular</td>\n      <td>Seldom</td>\n      <td>No</td>\n      <td>Not at all important</td>\n      <td>A few times a week</td>\n      <td>1.940257e+12</td>\n      <td>1.940258e+12</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 413 columns</p>\n</div>\n```\n:::\n:::\n\n\n### `get_names` Function\n\nLet's try to find the education demographic variable\n\n::: {#9cfbe1d5 .cell execution_count=3}\n``` {.python .cell-code}\nst.get_names(data, r'[Ee][Dd]')\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n['s21_EMP005_fed',\n 's21_ED002',\n 's21_ED004',\n 's21_ED004_a',\n 's21_ED005_1',\n 's21_ED005_2',\n 's21_ED005_3',\n 's21_ED005_4',\n 's21_ED006_1',\n 's21_ED006_2',\n 's21_ED006_3',\n 's21_ED006_4',\n 's21_ED006_5',\n 's21_ED006_6',\n 's21_ED006_7',\n 's21_ED006_8',\n 's21_ED006_9',\n 's21_ED006_10',\n 's21_ED007_1',\n 's21_ED007_2',\n 's21_ED007_3',\n 's21_ED007_4',\n 's21_ED008',\n 's21_ED009',\n 's21_ED010_1',\n 's21_ED010_2',\n 's21_ED010_3',\n 's21_ED010_4',\n 's21_ED011_1',\n 's21_ED011_2',\n 's21_ED011_3',\n 's21_ED011_4',\n 'educ']\n```\n:::\n:::\n\n\nLooks like we have several variables with ED, but there is an educ variables which is likely what we're after. This function is useful in selecting groups of variables based on regex for easier manipulation of data.\n\n### `tabs` Function for 1-way Summary\n\nLet's run a quick summary of this variable.\n\n::: {#c801b1f1 .cell execution_count=4}\n``` {.python .cell-code}\nst.tabs(data, 'educ', dropna=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nNo HS                   137\nHigh school graduate    924\nSome college            619\n2-year                  334\n4-year                  615\nPost-grad               371\nNaN                       0\ndtype: int64\n```\n:::\n:::\n\n\nThis looks like what we are interested in. Note that `NaN` is included at the bottom of the table since we specified `dropna=False` showing up that there are no missing values for this variable.\n\nNote how we can also specify weights with the `wts` argument\n\n::: {#78b093ed .cell execution_count=5}\n``` {.python .cell-code}\nst.tabs(data, 'educ', dropna=False, wts=\"weight\")\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nNo HS                   238.012949\nHigh school graduate    929.096289\nSome college            597.860835\n2-year                  320.430679\n4-year                  575.119248\nPost-grad               339.480000\nNaN                       0.000000\ndtype: float64\n```\n:::\n:::\n\n\nWe can now see these as weighted counts. If you want to see them as percentages just specify it! In this case, we want to convert to percents column-wise\n\n::: {#c238babd .cell execution_count=6}\n``` {.python .cell-code}\nst.tabs(data, 'educ', dropna=False, wts=\"weight\", display='column')\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nNo HS                    7.9\nHigh school graduate    31.0\nSome college            19.9\n2-year                  10.7\n4-year                  19.2\nPost-grad               11.3\nNaN                      0.0\ndtype: float64\n```\n:::\n:::\n\n\n### `recode` Function\n\nI want to collapse these groups into two categories: No Bachelor's Degree vs. Bachelors or Higher.\n\n::: {#f67662f2 .cell execution_count=7}\n``` {.python .cell-code}\ndata['educ_rc'] = st.recode(\n    data, \n    'educ',\n    '\"No HS\"=0;'\\\n    '\"High school graduate\"=0;'\\\n    '\"Some college\"=0;'\\\n    '\"2-year\"=0;'\\\n    '\"4-year\"=1;'\\\n    '\"Post-grad\"=1;'\\\n)\n\nst.tabs(data, 'educ_rc')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/survey_tools.py:266: UserWarning:\n\nColumn dtype changed from CATEGORY to CATEGORY.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n0    2014\n1     986\ndtype: int64\n```\n:::\n:::\n\n\nTypically, the survey data I work with is represented by numbers for answers instead of strings. The recode function is much more convenient in this case (see below).\n\n::: {#0bc87908 .cell execution_count=8}\n``` {.python .cell-code}\ndata['educ_numbers'] = data.educ.cat.codes\ndata['educ_rc'] = st.recode(\n    data, \n    'educ_numbers',\n    '0:3=\"No B\";4:5=\"B+\"'\n)\n\nst.tabs(data, 'educ_rc')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/survey_tools.py:266: UserWarning:\n\nColumn dtype changed from INT8 to OBJECT.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nNo B    2014\nB+       986\ndtype: int64\n```\n:::\n:::\n\n\n:::{.callout-tip}\nThe `recode` function has a few special keywords. For example, `lo` finds the lowest number `e.g. lo:10=1` and `hi` works the opposite way. Also, `NaN` is a key word selecting or setting missing values in your variables `e.g NaN=3`\n:::\n\nI'll quickly recode another variable, so we can compare.\n\n::: {#630d8bc0 .cell execution_count=9}\n``` {.python .cell-code}\ndata['newsint'] = data.newsint.cat.codes\ndata['newsint_rc'] = st.recode(data, 'newsint', \"0='High';1:5='Low'\")\nst.tabs(data, 'newsint_rc')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/survey_tools.py:266: UserWarning:\n\nColumn dtype changed from INT8 to OBJECT.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nHigh    1510\nLow     1490\ndtype: int64\n```\n:::\n:::\n\n\n### `tabs` Function for 2-way Tabulation\n\nLet's look at a crosstab break of news interest by education.\n\n::: {#612d4bd3 .cell execution_count=10}\n``` {.python .cell-code}\nst.tabs(data, 'newsint_rc', 'educ_rc', wts = \"weight\", display='column')\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>No B</th>\n      <th>B+</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>High</th>\n      <td>42.7</td>\n      <td>61.8</td>\n    </tr>\n    <tr>\n      <th>Low</th>\n      <td>57.3</td>\n      <td>38.2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFrom this, we can see those with a bachelor's degree or higher are more interested in the news than those without.\n\n:::{.callout-tip}\nUsing the `display` argument, we could also summarize by `row` or `cell`\n:::\n\n### `rake_weight` Function\n\nThis survey data is already weighted in the `weight` column we've been using, but if your data isn't already weighted use the `rake_weight` function.\n\nI'll show a simple example below.\n\n::: {#68b94f87 .cell execution_count=11}\n``` {.python .cell-code}\ndata['age'] = 2021 - data.birthyr\ndata['age_rc'] = st.recode(data, 'age', '0:30=1;31:45=2;46:65=3;66:120=4')\nst.tabs(data, 'age_rc', display='column')\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n3    35.1\n2    26.8\n4    19.6\n1    18.6\ndtype: float64\n```\n:::\n:::\n\n\n::: {#e074839d .cell execution_count=12}\n``` {.python .cell-code}\ndata['gender_rc'] = st.recode(data, 'gender', '\"Male\"=1;\"Female\"=2')\nst.tabs(data, 'gender_rc', display='column')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Library/Frameworks/Python.framework/Versions/3.11/lib/python3.11/site-packages/survey_tools.py:266: UserWarning:\n\nColumn dtype changed from CATEGORY to CATEGORY.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n1    46.8\n2    53.2\ndtype: float64\n```\n:::\n:::\n\n\nAbove you can see the unweighted tabulations of age and gender. Let's weight them now.\n\n::: {#817916a9 .cell execution_count=13}\n``` {.python .cell-code}\ntrue_props = pd.DataFrame({\n    'Names':['gender','gender','age_rc','age_rc','age_rc','age_rc',],\n    'Levels':['Male', 'Female',1,2,3,4],\n    'Proportions':[0.5,0.5,0.2,0.25,0.35,0.2],\n})\n\ndata_w_new_wts = st.rake_weight(data, true_props, weight_nm='new_weight')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nVariable:  gender\nMale      50.0\nFemale    50.0\ndtype: float64\nVariable:  age_rc\n3    35.0\n2    25.0\n4    20.0\n1    20.0\ndtype: float64\n\n            Iterations: 1\n            Max Weight: 1.1487352180792596\n            Min Weight: 0.876682464644851\n            \n```\n:::\n:::\n\n\nThe `rake_weight` function outputs a few statistics like max weight, min weight, and iterations. You can also see the weighted tabs to see how well your weights match up. You can also disable the summary setting `qa=False`\n\nAs mentioned above, Stars, feedback, and contributions welcome for the `survey_tools` package!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}